name: scenario test

on:
  workflow_dispatch:
  pull_request:
  merge_group:

env:
  PYTHON_VERSION: '3.10'

jobs:
  create_scenario_test_image:
    name: build image for scenario test
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: false
      matrix:
        rosdistro: [humble]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/scenario/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:scenario-${{ github.sha }}
          cache-from: type=gha

  setup_scenario_test_library:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup virtual environment
        run: |
          python -m venv env
          source env/bin/activate

      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: env
          key: ${{ runner.os }}-env-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-env-

      - name: Install robocup_scenario_test library
        run: |
          source env/bin/activate
          python -m pip install --upgrade pip
          sudo apt update
          sudo apt install -y protobuf-compiler
          pip install -v git+https://github.com/SSL-Roots/robocup_scenario_test
          pip install pytest

  scenario_test:
#    needs: [create_scenario_test_image, setup_scenario_test_library]
    strategy:
      fail-fast: false
      matrix:
        env:
          - {TEST: "scenario_test/test.py"}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: env
          key: ${{ runner.os }}-env-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-env-

      - name: Setup virtual environment
        run: |
          python -m venv env
          source env/bin/activate
          python -m pip list

      - name: Start Docker Compose services
        run: |
          docker compose -f docker/scenario/docker-compose.yaml up -d
        env:
          CRANE_TAG: scenario-55e43d0987fe4b2038cd0141253dbf1cb53b5956
#          CRANE_TAG: scenario-${{ github.sha }}

      - name: Wait for crane to start
        timeout-minutes: 5
        run: |
          sleep 5

      - name: Download logger
        run: |
          curl -L https://github.com/RoboCup-SSL/ssl-go-tools/releases/download/v1.5.2/ssl-log-recorder_v1.5.2_linux_amd64 -o ssl-log-recorder
          chmod +x ssl-log-recorder

      - name: Run pytest
        run: |
          source env/bin/activate
          pytest ${{ matrix.env.TEST }} --vision_port=10020 --logging --log_recorder=./ssl-log-recorder
          echo "LOG_EXISTS=$(ls *.log.gz 2> /dev/null)" >> $GITHUB_ENV

      - name: Get and print logs
        if: always()
        run: docker compose -f docker/scenario/docker-compose.yaml logs

      - name: Clean up Docker Compose services
        if: always()
        run: docker compose -f docker/scenario/docker-compose.yaml down

      - name: Upload artifacts
        id: upload-artifact
        if: env.LOG_EXISTS != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env.TEST}}-failure-logs
          path: '*.log.gz'

      - name: Comment PR with Artifact URL
        if: env.LOG_EXISTS != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Failure logs: ${{ steps.upload-artifact.outputs.artifact-url }}
